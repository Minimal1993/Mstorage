/*
 * MStorage - storage for notes.
 * 
 * Permission is granted to copy, distribute and/or
 * modify  this  document under  the  terms  of the
 * GNU General Public License
 * 
 * @author: ilya.gulevskiy
 * @email: naveter@gmail.com
 * @date: 2016
 */
package mstorage.components;

import StorageCollection.*;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.swing.*;

/**
 * Carousel for images
 *
 * @author ilya.gulevskiy
 */
public class ImageCarousel extends javax.swing.JPanel {

	protected File File = null;

	/**
	 * Creates new form ImageCarousel
	 */
	public ImageCarousel(File file) {
		this.File = file;

		initComponents();

		this.initMain();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCenter = new javax.swing.JPanel();
        jScrollPaneCenter = new javax.swing.JScrollPane();
        jPanelInsideJScrollPane = new javax.swing.JPanel();

        jScrollPaneCenter.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneCenter.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout jPanelInsideJScrollPaneLayout = new javax.swing.GroupLayout(jPanelInsideJScrollPane);
        jPanelInsideJScrollPane.setLayout(jPanelInsideJScrollPaneLayout);
        jPanelInsideJScrollPaneLayout.setHorizontalGroup(
            jPanelInsideJScrollPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );
        jPanelInsideJScrollPaneLayout.setVerticalGroup(
            jPanelInsideJScrollPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );

        jScrollPaneCenter.setViewportView(jPanelInsideJScrollPane);

        javax.swing.GroupLayout jPanelCenterLayout = new javax.swing.GroupLayout(jPanelCenter);
        jPanelCenter.setLayout(jPanelCenterLayout);
        jPanelCenterLayout.setHorizontalGroup(
            jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneCenter)
        );
        jPanelCenterLayout.setVerticalGroup(
            jPanelCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelCenter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelCenter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Check whether is edge of right or left side of scrolling. Need for
	 * enabled\disabled buttons
	 */
	private void checkIsEdgeOfScrolling() {

	}

	private void jButtonPrevActionPerformed(java.awt.event.ActionEvent evt) {
		JScrollBar horizontalScrollBar = this.jScrollPaneCenter.getHorizontalScrollBar();
		int max = horizontalScrollBar.getMaximum();
		int val = horizontalScrollBar.getValue();
		int visiblaAmount = horizontalScrollBar.getVisibleAmount();

	}

	private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {
		JScrollBar horizontalScrollBar = this.jScrollPaneCenter.getHorizontalScrollBar();
		int max = horizontalScrollBar.getMaximum();
		int val = horizontalScrollBar.getValue();
		int visiblaAmount = horizontalScrollBar.getVisibleAmount();

		/*if max = val + visibalAmount - rigth edge is now
		setValue(0) or val = 0 - left edge is reached
		val + 106 - move to next picture
		val + visibalAmount cant be > max*/
		int forSet = 0;

		horizontalScrollBar.setValue(forSet);

	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelInsideJScrollPane;
    private javax.swing.JScrollPane jScrollPaneCenter;
    // End of variables declaration//GEN-END:variables

	private void initMain() {
		// If File without Images set a label
		if (0 == this.File.Images.size()) {
			// TODO: Im not sure it is good idea to create null Image object. And doubling code there is
			this.jPanelInsideJScrollPane.setLayout(new java.awt.BorderLayout());

			Image img = null;
			ImageItem ii = new ImageItem(img);

			java.awt.FlowLayout experimentLayout = new java.awt.FlowLayout();
			this.jPanelInsideJScrollPane.setLayout(experimentLayout);

			this.jPanelInsideJScrollPane.add(ii);

			return;
		}

		java.awt.FlowLayout experimentLayout = new java.awt.FlowLayout();
		this.jPanelInsideJScrollPane.setLayout(experimentLayout);

		TreeMap<String, Image> images = (TreeMap<String, Image>) this.File.Images;
		Set<Map.Entry<String, Image>> imgSet = images.entrySet();
		for (Map.Entry<String, Image> i : imgSet) {
			ImageItem ii = new ImageItem(i.getValue());

			this.jPanelInsideJScrollPane.add(ii);

		}

	}

}
