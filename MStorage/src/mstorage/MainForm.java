/*
 * MStorage - storage for notes.
 * 
 * Permission is granted to copy, distribute and/or
 * modify  this  document under  the  terms  of the
 * GNU General Public License
 * 
 * @author: ilya.gulevskiy
 * @email: mstorage.project@gmail.com
 * @date: 2016
 */
package mstorage;

import mstorage.dialogs.HowToUseDialog;
import mstorage.storagecollection.StorageCollection;
import mstorage.storagecollection.File;
import mstorage.components.StorageCollectionJTree;
import mstorage.models.*;
import mstorage.components.FileJTab;
import mstorage.events.EventsStorageCollectionHandler;
import mstorage.dialogs.SettingsDialog;
import mstorage.classes.Settings;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JTabbedPane;
import javax.swing.BorderFactory;
import javax.swing.border.*;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

import java.io.IOException;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.Action;
import javax.swing.InputMap;
import javax.swing.JMenu;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;
import mstorage.components.CryptComp;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.*;

import org.apache.commons.lang3.StringUtils;

//import java.util.ArrayList;
/**
 *
 * @author ilya.gulevskiy
 */
public class MainForm extends javax.swing.JFrame {

	protected StorageCollectionJTree tree;
	protected Settings Settings = null;
	protected static CommandLine CommandLine;
	public boolean HowToUseDialogIsOpened = false;

	public static CommandLine getCommandLine() {
		return CommandLine;
	}

	/**
	 * Properties of application
	 */
	public Settings getSettings() {
		if (null == this.Settings) {
			this.Settings = mstorage.classes.Settings.getInstance();
		}

		return this.Settings;
	}

	/**
	 * Get common object of tree
	 *
	 * @return
	 */
	public StorageCollectionJTree getTree() {
		return this.tree;
	}

	public static MainForm Instance = null;

	/**
	 * Creates new form MainForm
	 */
	public MainForm() {
		Instance = this;

		this.initComponents();

		// Inint storage collection tree
		this.initTree();

		// Custom settings
		this.initMain();
	}

	/**
	 * If some controllers will need access to MainForm components, they can
	 * receive instance of MainForm by this method
	 *
	 * @return
	 */
	public static MainForm getInstance() {
		return Instance;
	}

	public void initTree() {
		java.io.File file;
		String dir = this.getSettings().getProperty("StorageDirectory");

		try {
			file = new java.io.File(dir);
			if (!file.exists() || !file.isDirectory()) {
				return;
			}
		} catch (Exception e) {
			return;
		}

		StorageCollection sc = new StorageCollection(file.getAbsolutePath().toString());
		sc.scan();

		tree = new StorageCollectionJTree(sc.FStorage, true);
		tree.setRootVisible(false);
		tree.setShowsRootHandles(true);
		tree.setToggleClickCount(2);
//		tree.setEditable(true);
		tree.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

		ScrollPaneStorageTree.setViewportView(tree);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        SplitPaneMain = new javax.swing.JSplitPane();
        ScrollPaneStorageTree = new javax.swing.JScrollPane();
        ScrollPaneDocuments = new javax.swing.JScrollPane();
        TabbedPaneMain = new javax.swing.JTabbedPane();
        ToolBarMain = new javax.swing.JToolBar();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        ButtonHideStorageTreePanel = new javax.swing.JToggleButton();
        jButtonSearchAll = new javax.swing.JButton();
        jButtonRefreshTree = new javax.swing.JButton();
        jSeparatorFileMenu = new javax.swing.JToolBar.Separator();
        jButtonSearchInFile = new javax.swing.JButton();
        jButtonRenameFile = new javax.swing.JButton();
        jButtonAddImage = new javax.swing.JButton();
        jButtonMoveFile = new javax.swing.JButton();
        jButtonDeleteFile = new javax.swing.JButton();
        jButtonSaveFile = new javax.swing.JButton();
        jButtonSaveFileAs = new javax.swing.JButton();
        jButtonSaveAllFiles = new javax.swing.JButton();
        jToggleButtonVisibilityImageCarousel = new javax.swing.JToggleButton();
        jButtonChangePassword = new javax.swing.JButton();
        jButtonDecryptFile = new javax.swing.JButton();
        jButtonCryptFile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        editMenu = new javax.swing.JMenu();
        jMenuItemSaveFile = new javax.swing.JMenuItem();
        jMenuItemRefreshAllTree = new javax.swing.JMenuItem();
        jMenuItemSearchInRootFolder = new javax.swing.JMenuItem();
        jMenuItemSettings = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        jCheckBoxMenuItemViewMenuToolbar = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemViewStorageTreePanel = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItemHowToUse = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();
        jMenuCloseActiveTab = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MStorage v.1.0.1");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        SplitPaneMain.setBorder(null);
        SplitPaneMain.setDividerLocation(200);
        SplitPaneMain.setPreferredSize(new java.awt.Dimension(309, 50));

        ScrollPaneStorageTree.setPreferredSize(new java.awt.Dimension(100, 100));
        SplitPaneMain.setLeftComponent(ScrollPaneStorageTree);

        TabbedPaneMain.setDoubleBuffered(true);
        TabbedPaneMain.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneMainStateChanged(evt);
            }
        });
        ScrollPaneDocuments.setViewportView(TabbedPaneMain);

        SplitPaneMain.setRightComponent(ScrollPaneDocuments);

        ToolBarMain.setFloatable(false);
        ToolBarMain.setRollover(true);
        ToolBarMain.add(jSeparator1);

        ButtonHideStorageTreePanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/node-tree.24x24.png"))); // NOI18N
        ButtonHideStorageTreePanel.setSelected(true);
        ButtonHideStorageTreePanel.setToolTipText("Show list of storage tree");
        ButtonHideStorageTreePanel.setFocusable(false);
        ButtonHideStorageTreePanel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonHideStorageTreePanel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonHideStorageTreePanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonHideStorageTreePanelActionPerformed(evt);
            }
        });
        ToolBarMain.add(ButtonHideStorageTreePanel);

        jButtonSearchAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/magnifier.24x24.png"))); // NOI18N
        jButtonSearchAll.setToolTipText("Search in root folder");
        jButtonSearchAll.setEnabled(false);
        jButtonSearchAll.setFocusable(false);
        jButtonSearchAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSearchAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSearchAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchAllActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonSearchAll);

        jButtonRefreshTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.24x24.png"))); // NOI18N
        jButtonRefreshTree.setToolTipText("Refresh all tree");
        jButtonRefreshTree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRefreshTree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRefreshTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshTreeActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonRefreshTree);
        ToolBarMain.add(jSeparatorFileMenu);

        jButtonSearchInFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/page_white_magnify.24x24.png"))); // NOI18N
        jButtonSearchInFile.setToolTipText("Search in this file");
        jButtonSearchInFile.setEnabled(false);
        jButtonSearchInFile.setFocusable(false);
        jButtonSearchInFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSearchInFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSearchInFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchInFileActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonSearchInFile);

        jButtonRenameFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/textfield.24x24.png"))); // NOI18N
        jButtonRenameFile.setToolTipText("Rename this file");
        jButtonRenameFile.setFocusable(false);
        jButtonRenameFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRenameFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRenameFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenameFileActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonRenameFile);

        jButtonAddImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/picture_add.24x24.png"))); // NOI18N
        jButtonAddImage.setToolTipText("Add picture to this file");
        jButtonAddImage.setFocusable(false);
        jButtonAddImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddImageActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonAddImage);

        jButtonMoveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_move.24x24.png"))); // NOI18N
        jButtonMoveFile.setToolTipText("Move this file to another folder");
        jButtonMoveFile.setFocusable(false);
        jButtonMoveFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonMoveFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonMoveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveFileActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonMoveFile);

        jButtonDeleteFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/page_white_delete.24x24.png"))); // NOI18N
        jButtonDeleteFile.setToolTipText("Delete this file");
        jButtonDeleteFile.setFocusable(false);
        jButtonDeleteFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDeleteFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDeleteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteFileActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonDeleteFile);

        jButtonSaveFile.setAction(jButtonSaveFile.getAction());
        jButtonSaveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disk.24x24.png"))); // NOI18N
        jButtonSaveFile.setToolTipText("Save changes in this file Ctrl + S");
        jButtonSaveFile.setFocusable(false);
        jButtonSaveFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFileActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonSaveFile);

        jButtonSaveFileAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save_as.24x24.png"))); // NOI18N
        jButtonSaveFileAs.setToolTipText("Save this file as...");
        jButtonSaveFileAs.setFocusable(false);
        jButtonSaveFileAs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveFileAs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSaveFileAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFileAsActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonSaveFileAs);

        jButtonSaveAllFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disk_multiple.24x24.png"))); // NOI18N
        jButtonSaveAllFiles.setToolTipText("Save changes in all open files");
        jButtonSaveAllFiles.setFocusable(false);
        jButtonSaveAllFiles.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveAllFiles.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSaveAllFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAllFilesActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonSaveAllFiles);

        jToggleButtonVisibilityImageCarousel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/picture.24x24.png"))); // NOI18N
        jToggleButtonVisibilityImageCarousel.setSelected(true);
        jToggleButtonVisibilityImageCarousel.setToolTipText("Show or hide panel with images carousel");
        jToggleButtonVisibilityImageCarousel.setFocusable(false);
        jToggleButtonVisibilityImageCarousel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonVisibilityImageCarousel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonVisibilityImageCarousel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonVisibilityImageCarouselActionPerformed(evt);
            }
        });
        ToolBarMain.add(jToggleButtonVisibilityImageCarousel);

        jButtonChangePassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lock_edit.24x24.png"))); // NOI18N
        jButtonChangePassword.setToolTipText("Change password for access to this file");
        jButtonChangePassword.setFocusable(false);
        jButtonChangePassword.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonChangePassword.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangePasswordActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonChangePassword);

        jButtonDecryptFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lock_delete.24x24.png"))); // NOI18N
        jButtonDecryptFile.setToolTipText("Decrypt file and reset encryption in future");
        jButtonDecryptFile.setFocusable(false);
        jButtonDecryptFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDecryptFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDecryptFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptFileActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonDecryptFile);

        jButtonCryptFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lock_add.24x24.png"))); // NOI18N
        jButtonCryptFile.setToolTipText("Crypt file and set password to access");
        jButtonCryptFile.setFocusable(false);
        jButtonCryptFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCryptFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCryptFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCryptFileActionPerformed(evt);
            }
        });
        ToolBarMain.add(jButtonCryptFile);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );

        editMenu.setText("Main");

        jMenuItemSaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSaveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disk.16x16.png"))); // NOI18N
        jMenuItemSaveFile.setText("Save file");
        jMenuItemSaveFile.setToolTipText("Save current open file");
        jMenuItemSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFileActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItemSaveFile);

        jMenuItemRefreshAllTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.16x16.png"))); // NOI18N
        jMenuItemRefreshAllTree.setText("Refresh all tree");
        jMenuItemRefreshAllTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshTreeActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItemRefreshAllTree);

        jMenuItemSearchInRootFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/magnifier.16x16.png"))); // NOI18N
        jMenuItemSearchInRootFolder.setText("Search in root folder");
        jMenuItemSearchInRootFolder.setEnabled(false);
        jMenuItemSearchInRootFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchAllActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItemSearchInRootFolder);

        jMenuItemSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cog.16x16.png"))); // NOI18N
        jMenuItemSettings.setText("Settings");
        jMenuItemSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSettingsActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItemSettings);

        jMenuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cross.16x16.png"))); // NOI18N
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItemExit);

        menuBar.add(editMenu);

        viewMenu.setMnemonic('e');
        viewMenu.setText("View");

        jCheckBoxMenuItemViewMenuToolbar.setSelected(true);
        jCheckBoxMenuItemViewMenuToolbar.setText("View menu toolbar");
        jCheckBoxMenuItemViewMenuToolbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemViewMenuToolbarActionPerformed(evt);
            }
        });
        viewMenu.add(jCheckBoxMenuItemViewMenuToolbar);

        jCheckBoxMenuItemViewStorageTreePanel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItemViewStorageTreePanel.setSelected(true);
        jCheckBoxMenuItemViewStorageTreePanel.setText("View storage tree panel");
        jCheckBoxMenuItemViewStorageTreePanel.setToolTipText("");
        jCheckBoxMenuItemViewStorageTreePanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemViewStorageTreePanelActionPerformed(evt);
            }
        });
        viewMenu.add(jCheckBoxMenuItemViewStorageTreePanel);

        menuBar.add(viewMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        jMenuItemHowToUse.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemHowToUse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help.16x16.png"))); // NOI18N
        jMenuItemHowToUse.setMnemonic('c');
        jMenuItemHowToUse.setText("How to use");
        jMenuItemHowToUse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHowToUseActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItemHowToUse);

        jMenuItemAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information.16x16.png"))); // NOI18N
        jMenuItemAbout.setMnemonic('a');
        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItemAbout);

        menuBar.add(helpMenu);

        jMenuCloseActiveTab.setForeground(new java.awt.Color(204, 0, 0));
        jMenuCloseActiveTab.setText("X");
        jMenuCloseActiveTab.setToolTipText("Close current active tab");
        jMenuCloseActiveTab.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuCloseActiveTab.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jMenuCloseActiveTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuCloseActiveTabMouseClicked(evt);
            }
        });

        jMenuCloseActiveTab.setComponentOrientation(java.awt.ComponentOrientation.RIGHT_TO_LEFT);
        menuBar.add(javax.swing.Box.createHorizontalGlue());

        menuBar.add(jMenuCloseActiveTab);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
            .addComponent(ToolBarMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBarMain, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(SplitPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Show-hide list of storage tree
	 *
	 * @param evt
	 */
    private void ButtonHideStorageTreePanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonHideStorageTreePanelActionPerformed
		if (!ButtonHideStorageTreePanel.isSelected()) {
			ScrollPaneStorageTree.setVisible(false);
			SplitPaneMain.setDividerLocation(0);

			// Check menu item
			this.jCheckBoxMenuItemViewStorageTreePanel.setSelected(false);
		} else {
			ScrollPaneStorageTree.setVisible(true);
			SplitPaneMain.setDividerLocation(200);

			// Check menu item
			this.jCheckBoxMenuItemViewStorageTreePanel.setSelected(true);
		}
    }//GEN-LAST:event_ButtonHideStorageTreePanelActionPerformed

	/**
	 * Whether show tool bar at all or not
	 *
	 * @param evt
	 */
    private void jCheckBoxMenuItemViewMenuToolbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemViewMenuToolbarActionPerformed
		if (this.jCheckBoxMenuItemViewMenuToolbar.isSelected()) {
			this.ToolBarMain.setVisible(true);
		} else {
			this.ToolBarMain.setVisible(false);
		}

		this.getSettings().setProperty("ViewMenuToolbar",
				Boolean.toString(this.jCheckBoxMenuItemViewMenuToolbar.isSelected())
		);
    }//GEN-LAST:event_jCheckBoxMenuItemViewMenuToolbarActionPerformed

    private void jCheckBoxMenuItemViewStorageTreePanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemViewStorageTreePanelActionPerformed
		if (!this.jCheckBoxMenuItemViewStorageTreePanel.isSelected()) {
			ScrollPaneStorageTree.setVisible(false);
			SplitPaneMain.setDividerLocation(0);
			ButtonHideStorageTreePanel.setSelected(false);
		} else {
			ScrollPaneStorageTree.setVisible(true);
			SplitPaneMain.setDividerLocation(200);
			ButtonHideStorageTreePanel.setSelected(true);
		}

		this.getSettings().setProperty("ViewStorageTreePanel",
				Boolean.toString(this.jCheckBoxMenuItemViewStorageTreePanel.isSelected())
		);

    }//GEN-LAST:event_jCheckBoxMenuItemViewStorageTreePanelActionPerformed

    private void jButtonSearchAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchAllActionPerformed
		
    }//GEN-LAST:event_jButtonSearchAllActionPerformed

	/**
	 * Refresh all tree, mean create a new tree instead current
	 *
	 * @param evt
	 */
    private void jButtonRefreshTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshTreeActionPerformed
		this.initTree();

		this.checkOpenedTabsFileExists();
		this.checkButtonCloseCurrentDocument();
    }//GEN-LAST:event_jButtonRefreshTreeActionPerformed

    private void jButtonSearchInFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchInFileActionPerformed
		
    }//GEN-LAST:event_jButtonSearchInFileActionPerformed

    private void jButtonRenameFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenameFileActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("rename_file");
    }//GEN-LAST:event_jButtonRenameFileActionPerformed

    private void jButtonAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddImageActionPerformed
		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;
		
		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("add_image");
    }//GEN-LAST:event_jButtonAddImageActionPerformed

    private void jButtonMoveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveFileActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("move_file");
    }//GEN-LAST:event_jButtonMoveFileActionPerformed

    private void jButtonDeleteFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteFileActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("delete_file");

    }//GEN-LAST:event_jButtonDeleteFileActionPerformed

	/**
	 * Save file in active tab
	 *
	 * @param evt
	 */
    private void jButtonSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveFileActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("save_file");
    }//GEN-LAST:event_jButtonSaveFileActionPerformed

    private void jButtonSaveAllFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAllFilesActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		// Check whether exist changed files if was set icon in tab
		int count = this.getTabbedPaneMain().getTabCount();
		for (int i = 0; i < count; i++) {
			javax.swing.Icon icon = this.getTabbedPaneMain().getIconAt(i);
			if (null == this.getTabbedPaneMain().getIconAt(i)) {
				continue;
			}

			FileJTab tab = (FileJTab) this.getTabbedPaneMain().getComponent(i);
			String content = tab.TextAreaDocument.getText();

			try {
				tab.File.save(content);
			} catch (IOException e) {
				MainForm.showError(e.getMessage());
			}

			// Remove icon 'changed' from title tab
			this.getTabbedPaneMain().setIconAt(i, null);
		}
    }//GEN-LAST:event_jButtonSaveAllFilesActionPerformed

    private void jMenuItemSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSettingsActionPerformed
		javax.swing.JDialog sd = new SettingsDialog(this, true);
		sd.pack();
		sd.setLocationRelativeTo(this);
		sd.setVisible(true);

		sd.addWindowListener(new mstorage.events.SettingFormListener());
    }//GEN-LAST:event_jMenuItemSettingsActionPerformed

    private void jMenuItemHowToUseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHowToUseActionPerformed
		if (true == this.HowToUseDialogIsOpened) {
			return;
		}

		final javax.swing.JDialog sd = new HowToUseDialog();
		sd.pack();
		sd.setLocationRelativeTo(this);
		sd.setVisible(true);
		this.HowToUseDialogIsOpened = true;

		sd.addWindowListener(new WindowAdapter() {
			public void windowClosed(WindowEvent e) {
				HowToUseDialog w = (HowToUseDialog) e.getWindow();
				MainForm.getInstance().HowToUseDialogIsOpened = false;
			}

			public void windowClosing(WindowEvent e) {
//				MainForm.getInstance().HowToUseDialogIsOpened = false;
			}
		});
    }//GEN-LAST:event_jMenuItemHowToUseActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed

		final javax.swing.JDialog sd = new About(this, true);
		sd.pack();
		sd.setLocationRelativeTo(this);
		sd.setVisible(true);

		sd.addWindowListener(new WindowAdapter() {
			public void windowClosed(WindowEvent e) {
				About w = (About) e.getWindow();
				int rs = w.getReturnStatus();
			}

			public void windowClosing(WindowEvent e) {
			}
		});
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuCloseActiveTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuCloseActiveTabMouseClicked
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;
		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);

		esch.call("close_this_tab");

    }//GEN-LAST:event_jMenuCloseActiveTabMouseClicked

    private void jButtonSaveFileAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveFileAsActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("save_file_as");
    }//GEN-LAST:event_jButtonSaveFileAsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		// Saving in Settings current opened files
		ArrayList<String> list = new ArrayList<>();
		
		// Current opened files with flag read-only
		ArrayList<String> listReadOnly = new ArrayList<>();
		
		int count = this.getTabbedPaneMain().getTabCount();
		for (int i = 0; i < count; i++) {
			FileJTab tab = (FileJTab) this.getTabbedPaneMain().getComponent(i);
			
			// If document was changed and not saved
			if (tab.checkTextIsChanged() && !tab.File.getIsReadOnly()) {
				int dialogResult = JOptionPane.showConfirmDialog(
					MainForm.getInstance(), 
					tab.File.getPath().toAbsolutePath().toString()
					+ "\nSave document before closing?", 
					"Warning", 
					JOptionPane.YES_NO_OPTION
				);

				if (dialogResult == JOptionPane.YES_OPTION) {
					EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(tab.File);
					esch.call("save_file");
				}
			}
            
            // Dont save in OpenedFiles crypted file
            if (CryptComp.isCryptedFile(tab.File.getPath())) continue;
			
			// If readonly flag exists
			if (tab.File.getIsReadOnly()) listReadOnly.add(tab.File.getPath().toAbsolutePath().toString());

			list.add(tab.File.getPath().toAbsolutePath().toString());
		}

		String str = StringUtils.join(list, ";");
		this.getSettings().setProperty("OpenedFiles", str);
		
		str = StringUtils.join(listReadOnly, ";");
		this.getSettings().setProperty("OpenedFilesReadOnly", str);

		// Saving in Settings current selected file in opened files
		Integer selected = this.getTabbedPaneMain().getSelectedIndex();
		this.getSettings().setProperty("OpenedFilesSelected", selected.toString());

		// Save current size main window
		Dimension windowSize = this.getContentPane().getSize();
		this.getSettings().setProperty("MainWindowWidth", Integer.toString(windowSize.width));
		this.getSettings().setProperty("MainWindowHeight", Integer.toString(windowSize.height));

		// Save corrent window position
		Point point = this.getLocation();
		this.getSettings().setProperty("MainWindowLocation", (int)point.getX() + "," + (int)point.getY());

    }//GEN-LAST:event_formWindowClosing

	/**
	 * Event when tab is switching
	 *
	 * @param evt
	 */
    private void TabbedPaneMainStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneMainStateChanged
		this.checkButtonCloseCurrentDocument();
    }//GEN-LAST:event_TabbedPaneMainStateChanged

	/**
	 * Show or hide panel with images carousel
	 *
	 * @param evt
	 */
    private void jToggleButtonVisibilityImageCarouselActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonVisibilityImageCarouselActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();

		tab.setVisibilityForJPanelDocumentPictures(
				this.jToggleButtonVisibilityImageCarousel.isSelected()
		);


    }//GEN-LAST:event_jToggleButtonVisibilityImageCarouselActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButtonChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangePasswordActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;
		
		if (!CryptComp.isCryptedFile(file.getPath())) return;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("change_file_password");      
    }//GEN-LAST:event_jButtonChangePasswordActionPerformed

    private void jButtonDecryptFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptFileActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;
		
		if (!CryptComp.isCryptedFile(file.getPath())) return;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("decrypt_file");    
    }//GEN-LAST:event_jButtonDecryptFileActionPerformed

    private void jButtonCryptFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCryptFileActionPerformed
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			this.checkButtonCloseCurrentDocument();
			return;
		}

		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;
		
		if (CryptComp.isCryptedFile(file.getPath())) return;

		EventsStorageCollectionHandler esch = new EventsStorageCollectionHandler(file);
		esch.call("crypt_file");        
    }//GEN-LAST:event_jButtonCryptFileActionPerformed

	/**
	 * When delete a file this method will close it tab if document has opened
	 *
	 * @param file
	 */
	public void checkOpenedFileWhenFileDelete(File file) {
		// Check if is opened file
		int count = this.getTabbedPaneMain().getTabCount();
		for (int i = 0; i < count; i++) {
			FileJTab tab = (FileJTab) this.getTabbedPaneMain().getComponent(i);
			if (!tab.File.equals(file)) {
				continue;
			}

			// Remove and decrease i because object count was changed
			this.getTabbedPaneMain().remove(i--);

			count = this.getTabbedPaneMain().getTabCount();
		}

	}

	public void checkOpenedTabsFileExists() {
		int count = this.getTabbedPaneMain().getTabCount();
		for (int i = 0; i < count; i++) {
			FileJTab tab = (FileJTab) this.getTabbedPaneMain().getComponent(i);

			java.io.File f = new java.io.File(tab.File.getPath().toAbsolutePath().toString());
			if (!f.exists()) {

				// Remove and decrease i because object count was changed
				this.getTabbedPaneMain().remove(i--);

				count = this.getTabbedPaneMain().getTabCount();
			}
		}
	}
	
	public void closeAllOpenedTabs() {
		int count = this.getTabbedPaneMain().getTabCount();
		for (int i = 0; i < count; i++) {
			FileJTab tab = (FileJTab) this.getTabbedPaneMain().getComponent(i);

			// Remove and decrease i because object count was changed
			this.getTabbedPaneMain().remove(i--);
			count = this.getTabbedPaneMain().getTabCount();
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Windows".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		// Parse comman-line
		commandLineParser(args);

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainForm().setVisible(true);
			}
		});
	}

	/**
	 * Create and parse command line options
	 */
	private static void commandLineParser(String[] args) {
		CommandLineParser parser = new DefaultParser();

		// create the Options
		Options options = new Options();
		options.addOption("s", "settings", true, "set the another name of settings file.");

		try {
			// parse the command line arguments
			CommandLine = parser.parse(options, args);

			// Set name of settings file
			if (CommandLine.hasOption("settings")) {
				mstorage.classes.Settings.setSettingsFileName(CommandLine.getOptionValue("settings"));
			}
		} catch (ParseException exp) {
			System.out.println("Unexpected exception:" + exp.getMessage());
		}

	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ButtonHideStorageTreePanel;
    private javax.swing.JScrollPane ScrollPaneDocuments;
    private javax.swing.JScrollPane ScrollPaneStorageTree;
    private javax.swing.JSplitPane SplitPaneMain;
    private javax.swing.JTabbedPane TabbedPaneMain;
    private javax.swing.JToolBar ToolBarMain;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButtonAddImage;
    private javax.swing.JButton jButtonChangePassword;
    private javax.swing.JButton jButtonCryptFile;
    private javax.swing.JButton jButtonDecryptFile;
    private javax.swing.JButton jButtonDeleteFile;
    private javax.swing.JButton jButtonMoveFile;
    private javax.swing.JButton jButtonRefreshTree;
    private javax.swing.JButton jButtonRenameFile;
    private javax.swing.JButton jButtonSaveAllFiles;
    private javax.swing.JButton jButtonSaveFile;
    private javax.swing.JButton jButtonSaveFileAs;
    private javax.swing.JButton jButtonSearchAll;
    private javax.swing.JButton jButtonSearchInFile;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemViewMenuToolbar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemViewStorageTreePanel;
    private javax.swing.JMenu jMenuCloseActiveTab;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemHowToUse;
    private javax.swing.JMenuItem jMenuItemRefreshAllTree;
    private javax.swing.JMenuItem jMenuItemSaveFile;
    private javax.swing.JMenuItem jMenuItemSearchInRootFolder;
    private javax.swing.JMenuItem jMenuItemSettings;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparatorFileMenu;
    private javax.swing.JToggleButton jToggleButtonVisibilityImageCarousel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

	/**
	 * For access to main Tab when open files can be
	 *
	 * @return javax.swing.JTabbedPane
	 */
	public javax.swing.JTabbedPane getTabbedPaneMain() {
		return this.TabbedPaneMain;
	}

	/**
	 * For access to cross-button for closing active tab
	 *
	 * @return
	 */
	public javax.swing.JMenu getJMenuCloseActiveTab() {
		return this.jMenuCloseActiveTab;
	}

	/**
	 * Check whether show elements in tool bar, when file was opened or closed
	 */
	public void checkButtonCloseCurrentDocument() {
		if (0 == this.getTabbedPaneMain().getTabCount()) {
//			this.ButtonCloseCurrentDocument.setVisible(false);
			this.jMenuCloseActiveTab.setVisible(false);

			// Dont show file toolbar
			this.showFileMenuAndToolBar(false);

			return;
		}

//		this.ButtonCloseCurrentDocument.setVisible(true);
		this.jMenuCloseActiveTab.setVisible(true);

		// Show file menubar
		this.showFileMenuAndToolBar(true);

		// Add popup menu listener to text editor
		this.initPopupMenuTextEditorMouseListener();

		// Additional checkings
		FileJTab tab = (FileJTab) this.getTabbedPaneMain().getSelectedComponent();
		File file = (File) tab.File;

		// Check whether has current file images or not
		if (0 == file.Images.size()) {
			this.jToggleButtonVisibilityImageCarousel.setSelected(false);
			this.jToggleButtonVisibilityImageCarousel.setEnabled(false);
		} else {
			// According to last action in this tab, select or not 
			this.jToggleButtonVisibilityImageCarousel.setSelected(tab.VisibilityForJPanelDocumentPictures);
			this.jToggleButtonVisibilityImageCarousel.setEnabled(true);
		}
		
		// Button for crypt in menubar
		if (CryptComp.isCryptedFile(file.getPath())) {
			this.jButtonCryptFile.setVisible(false);
		}
		else {
			this.jButtonChangePassword.setVisible(false);
			this.jButtonDecryptFile.setVisible(false);
		}

	}

	/**
	 * Init main additional components defined by developer
	 */
	private void initMain() {
		// Set icon of main window
		setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/mstorage.48x48.png")));

		this.checkButtonCloseCurrentDocument();

		// Set mouse listener for popup menu on tabs title
		this.getTabbedPaneMain().addMouseListener(mstorage.menus.PopupMenuTabbedPaneMain.initMouseListener());

		// Set check/uncheck view menu items according to Settings
		if (!Boolean.valueOf(this.getSettings().getProperty("ViewMenuToolbar"))) {
			this.jCheckBoxMenuItemViewMenuToolbar.setSelected(false);
			this.jCheckBoxMenuItemViewMenuToolbarActionPerformed(new java.awt.event.ActionEvent(new Object(), 0, ""));
		}
		if (!Boolean.valueOf(this.getSettings().getProperty("ViewStorageTreePanel"))) {
			this.jCheckBoxMenuItemViewStorageTreePanel.setSelected(false);
			this.jCheckBoxMenuItemViewStorageTreePanelActionPerformed(new java.awt.event.ActionEvent(new Object(), 0, ""));
		}

		// Opened files with readonly flag
		java.util.List<String> listReadOnly = null;
		if (!this.getSettings().getProperty("OpenedFilesReadOnly").isEmpty()) {
			listReadOnly = Arrays.asList(
				StringUtils.split(this.getSettings().getProperty("OpenedFilesReadOnly"), ";")
			);
		}
		
		// Open opened files in last session
		if (!this.getSettings().getProperty("OpenedFiles").isEmpty()) {
			String[] list = StringUtils.split(this.getSettings().getProperty("OpenedFiles"), ";");

			for (String url : list) {
				Path path = Paths.get(url);
				File file = null;
				try {
					file = this.getTree().getTreeModel().getFolder().findFile(path);
				}
				catch(NullPointerException e) {
					continue;
				}
				if (null == file) {
					continue;
				}

                // Dont open crypted file
                if (CryptComp.isCryptedFile(file.getPath())) continue;
                
				FileJTab newtab = TabsFabric.getTab(file);
				MainForm.getInstance().getTabbedPaneMain().addTab(newtab.File.getFileName(), newtab);
				
				// If there is readonly flag
				if (null != listReadOnly && listReadOnly.contains(path.toAbsolutePath().toString())) {
					newtab.File.setIsReadOnly(true);
					newtab.checkReadOnly();
				}
			}

			// Select last selected file
			String selected = this.getSettings().getProperty("OpenedFilesSelected");
			if (!selected.isEmpty()
					&& Integer.parseInt(selected) > -1
					&& Integer.parseInt(selected) < this.getTabbedPaneMain().getTabCount()) {

				MainForm.getInstance().getTabbedPaneMain().setSelectedIndex((Integer.parseInt(selected)));
			}

			this.checkButtonCloseCurrentDocument();
		}

		// Set title of Main window according to settings
		this.setTitle(Settings.getProperty("AppName") + " v." + Settings.getProperty("Version"));

		// Set preferred size of main window
		// TODO: There is uncertainty because 16 and 59 tested only in Win
		this.setPreferredSize(
				new Dimension(
						Integer.parseInt(this.getSettings().getProperty("MainWindowWidth")) + 16,
						Integer.parseInt(this.getSettings().getProperty("MainWindowHeight")) + 59
				)
		);
		
		// Main Window location
		String[] MainWindowLocation = this.getSettings().getProperty("MainWindowLocation").split(",");
		if (2 == MainWindowLocation.length) {
			int x = Integer.parseInt(MainWindowLocation[0]);
			int y = Integer.parseInt(MainWindowLocation[1]);
			Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
			//if (x <= (int)screenSize.height && y <= (int)screenSize.width && x >= 0 && y >= 0 ) {
			
			// TODO: Have to do checking of max screen size include two or three monitors
			this.setLocation(x, y);
			
		}
		
		this.pack();

		// Set mouse listener for popup menu in ScrollPane of storage collection
//		this.ScrollPaneStorageTree.addMouseListener(mstorage.menus.PopupMenuScrollPaneStorageTree.initMouseListener());
	}

	/**
	 * Set mouse listener for popup menu into text editor when some tabs is
	 * selected
	 */
	public void initPopupMenuTextEditorMouseListener() {
		if (0 == this.getTabbedPaneMain().getTabCount()) {
			return;
		}

		FileJTab tab = (FileJTab) MainForm.getInstance().getTabbedPaneMain().getSelectedComponent();
		tab.TextAreaDocument.addMouseListener(mstorage.menus.PopupMenuTextEditor.initMouseListener());
	}

	/**
	 * Show or hide Tool bar with commands consider File
	 *
	 * @param show
	 */
	public void showFileMenuAndToolBar(boolean show) {
		// Toolbar menu
		this.jSeparatorFileMenu.setVisible(show);
		this.jButtonAddImage.setVisible(show);
		this.jButtonDeleteFile.setVisible(show);
		this.jButtonMoveFile.setVisible(show);
		this.jButtonRenameFile.setVisible(show);
		this.jButtonSaveAllFiles.setVisible(show);
		this.jButtonSaveFile.setVisible(show);
		this.jButtonSearchInFile.setVisible(show);
		this.jButtonSaveFileAs.setVisible(show);
		this.jToggleButtonVisibilityImageCarousel.setVisible(show);
		this.jButtonChangePassword.setVisible(show);
		this.jButtonDecryptFile.setVisible(show);
		this.jButtonCryptFile.setVisible(show);

		// Menu File
//		this.jMenuItemAddPicture.setEnabled(show);
//		this.jMenuItemDeleteFile.setEnabled(show);
//		this.jMenuItemMoveThisFile.setEnabled(show);
//		this.jMenuItemRenameThisFile.setEnabled(show);
//		this.jMenuItemSaveAllFiles.setEnabled(show);
//		this.jMenuItemSaveFile.setEnabled(show);
//		this.jMenuItemSaveThisFileAs.setEnabled(show);
//		this.jMenuItemSearchInThisFile.setEnabled(show);

		// For time action not released
//		this.jMenuItemSearchInThisFile.setEnabled(false);

	}

	/**
	 * Perform when Setting window is closed
	 */
	public void windowSettingClosed() {
		System.out.println("windowSetting");
	}
	
	//==========================================================================
	// Workers for errors handling
	public static void showError(String text){
		MainForm._showError(text);
	}
	
	public static void showError(Exception e){
		MainForm._showError(e.getMessage());
	}
	
	protected static void _showError(String text){
		JOptionPane.showMessageDialog(
			MainForm.getInstance(), 
			text,
			"Error",
			0,
			new javax.swing.ImageIcon(MainForm.getInstance().getClass().getResource("/images/exclamation.32x32.png"))
		);
		
		System.out.println(text);
	}

}
