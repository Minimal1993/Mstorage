/*
 * MStorage - storage for notes.
 * 
 * Permission is granted to copy, distribute and/or
 * modify  this  document under  the  terms  of the
 * GNU General Public License
 * 
 * @author: ilya.gulevskiy
 * @email: mstorage.project@gmail.com
 * @date: 2016
 */
package mstorage.dialogs;

import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import mstorage.MainForm;
import mstorage.classes.Settings;
import mstorage.components.CryptComp;
import mstorage.components.FileJTab;
import mstorage.events.EventsStorageCollectionHandler;
import mstorage.utils.FileUtils;
import say.swing.JFontChooser;

/**
 *
 * @author ilya.gulevskiy
 */
public class SettingsDialog extends javax.swing.JDialog {

	protected ButtonGroup HowOftenCheckUpdatesGroup = new ButtonGroup();
	public String CheckUpdatesDownloadURL = null;
	
	/**
	 * Creates new form SettingsDialog
	 */
	public SettingsDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	
		this.initMain();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneAppearance = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        SettingsTabbedPane = new javax.swing.JTabbedPane();
        jPanelCommon = new javax.swing.JPanel();
        jPanelCommonIn = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldStorageDirectory = new javax.swing.JTextField();
        jButtonBrowse = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldExcludeExtension = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldCommand2ViewExplorer = new javax.swing.JTextField();
        jPanelAppearance = new javax.swing.JPanel();
        jPanelAppearanceIn = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxStyleOfStorageTree = new javax.swing.JComboBox<>();
        jLayeredPaneEditorsFont = new javax.swing.JLayeredPane();
        jLabelCurrentEditorsFont = new javax.swing.JLabel();
        jButtonChangeEditorsFont = new javax.swing.JButton();
        jLabelEncoding = new javax.swing.JLabel();
        jComboBoxEncoding = new javax.swing.JComboBox<>();
        jPanelUpdates = new javax.swing.JPanel();
        jLabelHowOften = new javax.swing.JLabel();
        jRadioButtonHowOftenCheckUpdates1 = new javax.swing.JRadioButton();
        jRadioButtonHowOftenCheckUpdates2 = new javax.swing.JRadioButton();
        jRadioButtonHowOftenCheckUpdates3 = new javax.swing.JRadioButton();
        jButtonCheckUpdatesNow = new javax.swing.JButton();
        jLabelCheckUpdatesNowResult = new javax.swing.JLabel();
        jLabelUpdatesVisitTo = new javax.swing.JLabel();
        jButtonOK = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );

        jTabbedPaneAppearance.addTab("tab1", jPanel3);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");
        setModal(true);
        setName("dialogSettings"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCommonInLayout = new javax.swing.GroupLayout(jPanelCommonIn);
        jPanelCommonIn.setLayout(jPanelCommonInLayout);
        jPanelCommonInLayout.setHorizontalGroup(
            jPanelCommonInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelCommonInLayout.setVerticalGroup(
            jPanelCommonInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
        );

        jLabel1.setText("Select storage directory:");

        jTextFieldStorageDirectory.setText(Settings.getInstance().getProperty("StorageDirectory"));

        jButtonBrowse.setText("Browse...");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jLabel3.setText("Exclude extension, comma separated:");

        jTextFieldExcludeExtension.setText(Settings.getInstance().getProperty("ExcludeExtension"));

        jLabel4.setText("Command to view directory in file's explorer:");

        jTextFieldCommand2ViewExplorer.setText("explorer %s");

        javax.swing.GroupLayout jPanelCommonLayout = new javax.swing.GroupLayout(jPanelCommon);
        jPanelCommon.setLayout(jPanelCommonLayout);
        jPanelCommonLayout.setHorizontalGroup(
            jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelCommonLayout.createSequentialGroup()
                        .addGroup(jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldStorageDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldExcludeExtension)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldCommand2ViewExplorer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelCommonIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(95, 95, 95))
        );
        jPanelCommonLayout.setVerticalGroup(
            jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCommonLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldStorageDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonBrowse))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldExcludeExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCommand2ViewExplorer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanelCommonIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        SettingsTabbedPane.addTab("Common", jPanelCommon);

        jLabel2.setText("Style of storage tree:");

        jComboBoxStyleOfStorageTree.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Delta", "Vega" }));
        jComboBoxStyleOfStorageTree.setSelectedItem(Settings.getInstance().getProperty("Icons"));
        jComboBoxStyleOfStorageTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStyleOfStorageTreeActionPerformed(evt);
            }
        });

        jLayeredPaneEditorsFont.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Editor's font", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        jLabelCurrentEditorsFont.setText("Current font");

        jButtonChangeEditorsFont.setText("Change");
        jButtonChangeEditorsFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeEditorsFontActionPerformed(evt);
            }
        });

        jLayeredPaneEditorsFont.setLayer(jLabelCurrentEditorsFont, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneEditorsFont.setLayer(jButtonChangeEditorsFont, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPaneEditorsFontLayout = new javax.swing.GroupLayout(jLayeredPaneEditorsFont);
        jLayeredPaneEditorsFont.setLayout(jLayeredPaneEditorsFontLayout);
        jLayeredPaneEditorsFontLayout.setHorizontalGroup(
            jLayeredPaneEditorsFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneEditorsFontLayout.createSequentialGroup()
                .addComponent(jLabelCurrentEditorsFont, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonChangeEditorsFont, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jLayeredPaneEditorsFontLayout.setVerticalGroup(
            jLayeredPaneEditorsFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneEditorsFontLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPaneEditorsFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCurrentEditorsFont)
                    .addComponent(jButtonChangeEditorsFont))
                .addGap(4, 4, 4))
        );

        jLabelEncoding.setText("Files encoding:");

        jComboBoxEncoding.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "UTF-8", "System default" }));
        jComboBoxEncoding.setSelectedItem(Settings.getInstance().getProperty("Encoding"));
        jComboBoxEncoding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEncodingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAppearanceInLayout = new javax.swing.GroupLayout(jPanelAppearanceIn);
        jPanelAppearanceIn.setLayout(jPanelAppearanceInLayout);
        jPanelAppearanceInLayout.setHorizontalGroup(
            jPanelAppearanceInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAppearanceInLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(jComboBoxStyleOfStorageTree, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLayeredPaneEditorsFont)
            .addGroup(jPanelAppearanceInLayout.createSequentialGroup()
                .addComponent(jLabelEncoding)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBoxEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelAppearanceInLayout.setVerticalGroup(
            jPanelAppearanceInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAppearanceInLayout.createSequentialGroup()
                .addGroup(jPanelAppearanceInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxStyleOfStorageTree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPaneEditorsFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelAppearanceInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEncoding)
                    .addComponent(jComboBoxEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 91, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelAppearanceLayout = new javax.swing.GroupLayout(jPanelAppearance);
        jPanelAppearance.setLayout(jPanelAppearanceLayout);
        jPanelAppearanceLayout.setHorizontalGroup(
            jPanelAppearanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAppearanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelAppearanceIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelAppearanceLayout.setVerticalGroup(
            jPanelAppearanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAppearanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelAppearanceIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        SettingsTabbedPane.addTab("Appearance", jPanelAppearance);

        jLabelHowOften.setText("How often check updates for app:");

        jRadioButtonHowOftenCheckUpdates1.setText("One time per week");
        jRadioButtonHowOftenCheckUpdates1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonHowOftenCheckUpdates1ActionPerformed(evt);
            }
        });

        jRadioButtonHowOftenCheckUpdates2.setText("One time per month");
        jRadioButtonHowOftenCheckUpdates2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonHowOftenCheckUpdates2ActionPerformed(evt);
            }
        });

        jRadioButtonHowOftenCheckUpdates3.setText("Never check updates");
        jRadioButtonHowOftenCheckUpdates3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonHowOftenCheckUpdates3ActionPerformed(evt);
            }
        });

        jButtonCheckUpdatesNow.setText("Check updates now");
        jButtonCheckUpdatesNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckUpdatesNowActionPerformed(evt);
            }
        });

        jLabelCheckUpdatesNowResult.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelCheckUpdatesNowResult.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabelUpdatesVisitTo.setText("<html>or visit to <a href='#'>" + Settings.getInstance().getProperty("ProgectURL").replace("http://", "") + "</a></html>");
        jLabelUpdatesVisitTo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelUpdatesVisitTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelUpdatesVisitToMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelUpdatesLayout = new javax.swing.GroupLayout(jPanelUpdates);
        jPanelUpdates.setLayout(jPanelUpdatesLayout);
        jPanelUpdatesLayout.setHorizontalGroup(
            jPanelUpdatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpdatesLayout.createSequentialGroup()
                .addGroup(jPanelUpdatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelUpdatesLayout.createSequentialGroup()
                        .addGroup(jPanelUpdatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelUpdatesLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabelHowOften))
                            .addGroup(jPanelUpdatesLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonCheckUpdatesNow)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelUpdatesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelUpdatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCheckUpdatesNowResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelUpdatesLayout.createSequentialGroup()
                                .addGroup(jPanelUpdatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonHowOftenCheckUpdates2)
                                    .addComponent(jRadioButtonHowOftenCheckUpdates3)
                                    .addComponent(jRadioButtonHowOftenCheckUpdates1))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabelUpdatesVisitTo, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanelUpdatesLayout.setVerticalGroup(
            jPanelUpdatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpdatesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelHowOften)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonHowOftenCheckUpdates1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonHowOftenCheckUpdates2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonHowOftenCheckUpdates3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCheckUpdatesNow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCheckUpdatesNowResult, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelUpdatesVisitTo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SettingsTabbedPane.addTab("Updates", jPanelUpdates);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(SettingsTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonOK)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(SettingsTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOK)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        MainForm.getInstance().windowSettingClosed();
		
    }//GEN-LAST:event_formWindowClosed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        
		// Exclude extensions
		if (Settings.getInstance().getProperty("ExcludeExtension") != this.jTextFieldExcludeExtension.getText()){
			String val = this.jTextFieldExcludeExtension.getText().trim();
			int flags = Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE;			
			Pattern pattern = Pattern.compile("^[0-9a-z, ]*$", flags);
			Matcher m = pattern.matcher(val);  
			if(!m.matches()) {
				MainForm.showError("Exclude extensions must contain letters, digits, commas and spaces");
				return;
			}
			Settings.getInstance().setProperty("ExcludeExtension", this.jTextFieldExcludeExtension.getText());
		}
        
        // Command to view directory in file's explorer
		if (Settings.getInstance().getProperty("Command2ViewExplorer") != this.jTextFieldCommand2ViewExplorer.getText()){
            Settings.getInstance().setProperty("Command2ViewExplorer", this.jTextFieldCommand2ViewExplorer.getText().trim());
        }
		
		this.setVisible(false);
		this.dispose();
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
		fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fc.showOpenDialog(this);
		
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fc.getSelectedFile();
			
			if (file.exists() 
				&& file.isDirectory() 
				&& !file.getAbsolutePath().toString().equals( Settings.getInstance().getProperty("StorageDirectory") )) {
				
				Settings.getInstance().setProperty("StorageDirectory", file.getAbsolutePath().toString());
				
				this.jTextFieldStorageDirectory.setText(Settings.getInstance().getProperty("StorageDirectory"));
				
				MainForm.getInstance().initTree();
				
				// Close all opened tabs
				MainForm.getInstance().closeAllOpenedTabs();
				
//				MainForm.getInstance().checkOpenedTabsFileExists();
//				MainForm.getInstance().checkButtonCloseCurrentDocument();
			}
        } 
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jComboBoxStyleOfStorageTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStyleOfStorageTreeActionPerformed
		if(Settings.getInstance().getProperty("Icons").equals( this.jComboBoxStyleOfStorageTree.getSelectedItem().toString() )){
			return;
		}
		
		Settings.getInstance().setProperty("Icons", this.jComboBoxStyleOfStorageTree.getSelectedItem().toString());
		MainForm.getInstance().initTree();
    }//GEN-LAST:event_jComboBoxStyleOfStorageTreeActionPerformed

    private void jButtonChangeEditorsFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeEditorsFontActionPerformed
		JFontChooser fontChooser = new JFontChooser();
		Font prevFont = new Font(
			Settings.getInstance().getProperty("EditorsFont_name"), 
			Integer.decode(Settings.getInstance().getProperty("EditorsFont_style")),
			Integer.decode(Settings.getInstance().getProperty("EditorsFont_size"))
		);	
		if (null != prevFont) fontChooser.setSelectedFont(prevFont);
		
		int result = fontChooser.showDialog(this);
		if (result == JFontChooser.OK_OPTION) {
			Font font = fontChooser.getSelectedFont(); 
			Settings.getInstance().setProperty("EditorsFont_name", font.getName());
			Settings.getInstance().setProperty("EditorsFont_style", Integer.toString(font.getStyle()));
			Settings.getInstance().setProperty("EditorsFont_size", Integer.toString(font.getSize()));

			this.jLabelCurrentEditorsFont.setFont(font);
			this.jLabelCurrentEditorsFont.setText(font.getName() + ", " + font.getSize());
			
			// Change font in all opened tabs
			int count = MainForm.getInstance().getTabbedPaneMain().getTabCount();
			for (int i = 0; i < count; i++) {
				FileJTab tab = (FileJTab) MainForm.getInstance().getTabbedPaneMain().getComponent(i);
				tab.TextAreaDocument.setFont(font);
			}
		}
    }//GEN-LAST:event_jButtonChangeEditorsFontActionPerformed

    private void jRadioButtonHowOftenCheckUpdates1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonHowOftenCheckUpdates1ActionPerformed
        Settings.getInstance().setProperty("HowOftenCheckUpdates", "7"); 
    }//GEN-LAST:event_jRadioButtonHowOftenCheckUpdates1ActionPerformed

    private void jRadioButtonHowOftenCheckUpdates2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonHowOftenCheckUpdates2ActionPerformed
        Settings.getInstance().setProperty("HowOftenCheckUpdates", "30"); 
    }//GEN-LAST:event_jRadioButtonHowOftenCheckUpdates2ActionPerformed

    private void jRadioButtonHowOftenCheckUpdates3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonHowOftenCheckUpdates3ActionPerformed
        Settings.getInstance().setProperty("HowOftenCheckUpdates", "0"); 
    }//GEN-LAST:event_jRadioButtonHowOftenCheckUpdates3ActionPerformed

    private void jButtonCheckUpdatesNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckUpdatesNowActionPerformed
		// Handler for click on successfull result to load new version of app
		final MouseAdapter mouseAdapter = new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				if (!Desktop.isDesktopSupported() || null == CheckUpdatesDownloadURL) return;

				Desktop desktop = Desktop.getDesktop();
				try {
					URI uri = new URI(CheckUpdatesDownloadURL);
					desktop.browse(uri);
				} catch (Exception e) {
					MainForm.showError(e);
				} 						 
			}
		};
		
		this.CheckUpdatesDownloadURL = null;
		this.jLabelCheckUpdatesNowResult.setText("Please, wait...");
		this.jLabelCheckUpdatesNowResult.removeMouseListener(mouseAdapter);
		this.jLabelCheckUpdatesNowResult.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		jLabelCheckUpdatesNowResult.setIcon(null);
		
		// Do URL-respond asynchronously
		SwingWorker worker = new SwingWorker<Integer, Integer>() {
			@Override
			protected Integer doInBackground() throws Exception {
				ArrayList<String> newest = null;
				
				try {
					newest =  SettingsDialog.checkNewVersion();
					
					jLabelCheckUpdatesNowResult.setIcon(
						new javax.swing.ImageIcon(getClass().getResource("/images/information.24x24.png"))
					);
					
					// If new version is not avaliable
					if (null == newest) {
						jLabelCheckUpdatesNowResult.setText("You have actual version");						
					}
					else {
						jLabelCheckUpdatesNowResult.setText(
							"<html>New version is avaliable: " 
							+ Settings.getInstance().getProperty("AppName") + "." + newest.get(1) + "<br>"
							+ "<a href='#'>Download</a></html>"
						);
						jLabelCheckUpdatesNowResult.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

						// Add only one listener
						MouseListener[] ml = jLabelCheckUpdatesNowResult.getMouseListeners();
						if (0 == ml.length) jLabelCheckUpdatesNowResult.addMouseListener(mouseAdapter);
						
						CheckUpdatesDownloadURL = newest.get(0);
					}
					
				} catch (Exception e) {
					jLabelCheckUpdatesNowResult.setIcon(
						new javax.swing.ImageIcon(getClass().getResource("/images/exclamation.24x24.png"))
					);
					jLabelCheckUpdatesNowResult.setText("Error: " + e.getMessage());
				}

				return 42;
			}

		};
		worker.execute();

    }//GEN-LAST:event_jButtonCheckUpdatesNowActionPerformed

    private void jLabelUpdatesVisitToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelUpdatesVisitToMouseClicked
		if (!Desktop.isDesktopSupported()) return;
		
		Desktop desktop = Desktop.getDesktop();
		try {
			URI uri = new URI(Settings.getInstance().getProperty("CheckUpdatesURL"));
			desktop.browse(uri);
		} catch (Exception e) {
			MainForm.showError(e);
		} 
    }//GEN-LAST:event_jLabelUpdatesVisitToMouseClicked

    private void jComboBoxEncodingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEncodingActionPerformed
		if(Settings.getInstance().getProperty("Encoding").equals( this.jComboBoxEncoding.getSelectedItem().toString() )){
			return;
		}
        
        int count = MainForm.getInstance().getTabbedPaneMain().getTabCount();
        
        // Check whether all tabs is closed
        if (count > 0) {
            JOptionPane.showMessageDialog(
                MainForm.getInstance(), 
                "To change files encoding, please close all opened tabs and repeat.",
                "Message",
                0,
                new javax.swing.ImageIcon(MainForm.getInstance().getClass().getResource("/images/information.32x32.png"))
            );
            
            return;
        }        
		
		Settings.getInstance().setProperty("Encoding", this.jComboBoxEncoding.getSelectedItem().toString());
        
    }//GEN-LAST:event_jComboBoxEncodingActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				SettingsDialog dialog = new SettingsDialog(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane SettingsTabbedPane;
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonChangeEditorsFont;
    private javax.swing.JButton jButtonCheckUpdatesNow;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JComboBox<String> jComboBoxEncoding;
    private javax.swing.JComboBox<String> jComboBoxStyleOfStorageTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelCheckUpdatesNowResult;
    private javax.swing.JLabel jLabelCurrentEditorsFont;
    private javax.swing.JLabel jLabelEncoding;
    private javax.swing.JLabel jLabelHowOften;
    private javax.swing.JLabel jLabelUpdatesVisitTo;
    private javax.swing.JLayeredPane jLayeredPaneEditorsFont;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelAppearance;
    private javax.swing.JPanel jPanelAppearanceIn;
    private javax.swing.JPanel jPanelCommon;
    private javax.swing.JPanel jPanelCommonIn;
    private javax.swing.JPanel jPanelUpdates;
    private javax.swing.JRadioButton jRadioButtonHowOftenCheckUpdates1;
    private javax.swing.JRadioButton jRadioButtonHowOftenCheckUpdates2;
    private javax.swing.JRadioButton jRadioButtonHowOftenCheckUpdates3;
    private javax.swing.JTabbedPane jTabbedPaneAppearance;
    private javax.swing.JTextField jTextFieldCommand2ViewExplorer;
    private javax.swing.JTextField jTextFieldExcludeExtension;
    private javax.swing.JTextField jTextFieldStorageDirectory;
    // End of variables declaration//GEN-END:variables

	private void initMain() {
		setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/cog.32x32.png")));
		
		// Set example of editor's font
		Font prevFont = new Font(
			Settings.getInstance().getProperty("EditorsFont_name"), 
			Integer.decode(Settings.getInstance().getProperty("EditorsFont_style")),
			Integer.decode(Settings.getInstance().getProperty("EditorsFont_size"))
		);	
		if (null != prevFont){
			this.jLabelCurrentEditorsFont.setFont(prevFont);
			this.jLabelCurrentEditorsFont.setText(prevFont.getName() + ", " + prevFont.getSize());
		}
		
		// Check updates
		this.HowOftenCheckUpdatesGroup.add(this.jRadioButtonHowOftenCheckUpdates1);
		this.HowOftenCheckUpdatesGroup.add(this.jRadioButtonHowOftenCheckUpdates2);
		this.HowOftenCheckUpdatesGroup.add(this.jRadioButtonHowOftenCheckUpdates3);
		
		String howOftenCheckUpdates = Settings.getInstance().getProperty("HowOftenCheckUpdates");
		if (howOftenCheckUpdates.equals("30")) this.jRadioButtonHowOftenCheckUpdates2.setSelected(true);
		else if (howOftenCheckUpdates.equals("7")) this.jRadioButtonHowOftenCheckUpdates1.setSelected(true);
		else this.jRadioButtonHowOftenCheckUpdates3.setSelected(true);
		
		
	}
	
	/**
	 * Receive list of avaliable versions, compare them with current and return new if it exists
	 * 
	 * @return
	 * @throws Exception 
	 */	
	public static ArrayList<String> checkNewVersion() throws Exception {
		URLConnection connection = new URL( Settings.getInstance().getProperty("CheckUpdatesURL") ).openConnection();
		connection.setRequestProperty("Accept-Charset", "UTF-8");
		connection.setReadTimeout(10000);
		InputStream response = connection.getInputStream();

		String result = "";
		try (Scanner scanner = new Scanner(response)) {
			result += scanner.useDelimiter("\\A").next();
		}

		int flags = Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE;			
		Pattern pattern = Pattern.compile(Settings.getInstance().getProperty("CheckUpdatesURLPattern"), flags);
		Matcher m = pattern.matcher(result);

		HashMap<String, String> list = new HashMap<>();
		while(m.find()) {
			list.put(m.group(0), m.group(1) );
		}

		ArrayList<String> newest = Settings.compareNewVersion(list);
		
		return newest;
	}

}
